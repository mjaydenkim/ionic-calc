# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# enum ModelOperation {
#   create
#   update
#   delete
#   read # Short-hand to allow "get", "list", "sync", "listen", and "search"
  
#   get # Retrieves an individual item
#   list # Retrieves a list of items
#   sync # Enables ability to sync offline/online changes (including via DataStore)
#   listen # Subscribes to real-time changes
#   search # Enables ability to search using @searchable directive
# }

type Student @model @auth(rules: [
  {allow: public, provider: iam, operations: [create, update, delete, get, sync]},
  {allow: private, operations: [read]}
]) {
  # need auth rule for queries, mutations from student users
  id: ID!
  name: String!
  email: String!
  status: String!
  room: Room @belongsTo
}

type Teacher @model @auth(rules: [{allow: owner, ownerField: "id"}]) {
  id: ID!
  name: String!
  email: String
  room: Room @hasOne
}

type Room @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}]) { 
  # add another rule for iam so room can be queried by student
  id: ID! # no access
  name: String! # read only
  teacher: Teacher! @belongsTo # no access
  student: [Student] @hasMany # can add, get, not full read
  code: String! # read only
  # owner: String # no access
}
